// create-story-issues.js ‚Äî Creates GitHub issues for high-priority sports stories

import fs from "fs/promises";

const CONFIG = {
  minIssueScore: 15, // Only create issues for very high-priority stories
  issueLabels: ["sports-news", "breaking", "content-opportunity"],
  repo: "baysbestshorts-eng/westsidecotorreo-site"
};

async function loadStoriesData() {
  try {
    const data = await fs.readFile('sports-stories.json', 'utf8');
    return JSON.parse(data);
  } catch {
    return { stories: [] };
  }
}

async function saveStoriesData(data) {
  await fs.writeFile('sports-stories.json', JSON.stringify(data, null, 2));
}

function createIssueTitle(story) {
  const priority = story.score >= 20 ? "üö® BREAKING" : "‚ö° URGENT";
  const category = story.category.toUpperCase();
  return `${priority} ${category}: ${story.title}`;
}

function createIssueBody(story) {
  const urgencyLevel = story.score >= 20 ? "BREAKING NEWS" : "HIGH PRIORITY";
  
  return `## ${urgencyLevel} Sports Story

**Source:** ${story.source}  
**Category:** ${story.category}  
**Priority Score:** ${story.score}/30  
**Published:** ${story.pubDate}  

### Story Details
${story.description}

[**Read Full Story ‚Üí**](${story.link})

### Content Opportunity
This story scored ${story.score} points indicating high viral potential and audience interest.

**Suggested Actions:**
- [ ] Create video response/commentary
- [ ] Post on social media 
- [ ] Research additional context/background
- [ ] Monitor for updates/developments

### Story Metrics
- **Virality Score:** ${story.score}/30
- **Category:** ${story.category}
- **Time Detected:** ${story.timestamp}
- **Story Slug:** \`${story.slug}\`

---
*Auto-generated by Sports News Monitor*`;
}

async function createGitHubIssue(story) {
  // In a real GitHub Actions environment, this would use the GitHub CLI or API
  // For now, we'll simulate the issue creation
  
  const title = createIssueTitle(story);
  const body = createIssueBody(story);
  
  console.log(`üìù Would create GitHub issue:`);
  console.log(`Title: ${title}`);
  console.log(`Labels: ${CONFIG.issueLabels.join(', ')}`);
  console.log(`\n--- Issue Body ---`);
  console.log(body);
  console.log(`--- End Issue Body ---\n`);
  
  // In real implementation, this would be:
  // const { execSync } = require('child_process');
  // execSync(`gh issue create --title "${title}" --body "${body}" --label "${CONFIG.issueLabels.join(',')}"`, { stdio: 'inherit' });
  
  return {
    created: true,
    title,
    url: `https://github.com/${CONFIG.repo}/issues/123` // Mock URL
  };
}

async function processHighPriorityStories() {
  console.log("üéØ Processing high-priority stories for GitHub issues...");
  
  const data = await loadStoriesData();
  let issuesCreated = 0;
  
  for (const story of data.stories) {
    // Skip if already processed or below threshold
    if (story.issueCreated || story.score < CONFIG.minIssueScore) {
      continue;
    }
    
    try {
      const result = await createGitHubIssue(story);
      
      if (result.created) {
        story.issueCreated = true;
        story.issueUrl = result.url;
        story.issueCreatedAt = new Date().toISOString();
        issuesCreated++;
        
        console.log(`‚úÖ Created issue for: ${story.title}`);
      }
    } catch (error) {
      console.error(`‚ùå Failed to create issue for ${story.title}:`, error.message);
    }
  }
  
  // Save updated data
  await saveStoriesData(data);
  
  console.log(`üéâ Processing complete. Created ${issuesCreated} new issues.`);
  return { issuesCreated, totalStories: data.stories.length };
}

// CLI interface
if (import.meta.url === `file://${process.argv[1]}`) {
  processHighPriorityStories()
    .then(result => {
      console.log('üìä Final result:', result);
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• Issue creation failed:', error);
      process.exit(1);
    });
}

export { processHighPriorityStories, CONFIG as ISSUE_CONFIG };